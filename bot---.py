import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
from config import BOT_TOKEN, AGENCY_NAME, AGENT_NAME, REALTOR_NAME, DEMO_PROPERTY, ADMIN_CHAT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
GREETING, DEAL_TYPE, BUDGET, MORTGAGE, URGENCY, VIEWING_TIME, FINISH = range(7)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
    user = update.effective_user
    if not user:
        return ConversationHandler.END
    
    user_data[user.id] = {
        'name': user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        'username': user.username or "unknown",
        'phone': None
    }
    
    welcome_text = f"""–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–µ–Ω—è –∑–æ–≤—É—Ç {AGENT_NAME}, —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ {AGENCY_NAME}. 

–†–∞–¥ –ø–æ–º–æ—á—å —Å –∫–≤–∞—Ä—Ç–∏—Ä–æ–π –Ω–∞ {DEMO_PROPERTY['address']}!

üè† {DEMO_PROPERTY['description']}
üí∞ –¶–µ–Ω–∞: {DEMO_PROPERTY['price']}
üìê –ü–ª–æ—â–∞–¥—å: {DEMO_PROPERTY['area']}
üõè –ö–æ–º–Ω–∞—Ç: {DEMO_PROPERTY['rooms']}
üè¢ –≠—Ç–∞–∂: {DEMO_PROPERTY['floor']}

–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –∏ —Ä–∏–µ–ª—Ç–æ—Ä–∞ –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º, –æ—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.

–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞?"""
    
    keyboard = [
        [InlineKeyboardButton("üè† –ü–æ–∫—É–ø–∫–∞", callback_data="purchase")],
        [InlineKeyboardButton("üè° –ê—Ä–µ–Ω–¥–∞", callback_data="rent")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return DEAL_TYPE

async def deal_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏"""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END
    
    await query.answer()
    
    user_id = query.from_user.id
    deal_type = query.data
    user_data[user_id]['deal_type'] = "–ü–æ–∫—É–ø–∫–∞" if deal_type == "purchase" else "–ê—Ä–µ–Ω–¥–∞"
    
    budget_text = "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É?"
    if deal_type == "rent":
        budget_text = "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –Ω–∞ –∞—Ä–µ–Ω–¥—É?"
    
    keyboard = [
        [InlineKeyboardButton("–î–æ 10 –º–ª–Ω", callback_data="budget_10")],
        [InlineKeyboardButton("10-15 –º–ª–Ω", callback_data="budget_15")],
        [InlineKeyboardButton("15-20 –º–ª–Ω", callback_data="budget_20")],
        [InlineKeyboardButton("–ë–æ–ª–µ–µ 20 –º–ª–Ω", callback_data="budget_20+")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=budget_text, reply_markup=reply_markup)
    return BUDGET

async def budget_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞"""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END
    await query.answer()
    
    user_id = query.from_user.id
    budget_map = {
        "budget_10": "–î–æ 10 –º–ª–Ω",
        "budget_15": "10-15 –º–ª–Ω", 
        "budget_20": "15-20 –º–ª–Ω",
        "budget_20+": "–ë–æ–ª–µ–µ 20 –º–ª–Ω"
    }
    user_data[user_id]['budget'] = budget_map[query.data]
    
    mortgage_text = "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É? –£–∂–µ –µ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç –±–∞–Ω–∫–∞?"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –∏–ø–æ—Ç–µ–∫–∞, –æ–¥–æ–±—Ä–µ–Ω–∏–µ –µ—Å—Ç—å", callback_data="mortgage_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–∞–ª–∏—á–Ω—ã–µ", callback_data="mortgage_no")],
        [InlineKeyboardButton("ü§î –ü–ª–∞–Ω–∏—Ä—É—é –æ—Ñ–æ—Ä–º–∏—Ç—å", callback_data="mortgage_plan")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=mortgage_text, reply_markup=reply_markup)
    return MORTGAGE

async def mortgage_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ–± –∏–ø–æ—Ç–µ–∫–µ"""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END
    await query.answer()
    
    user_id = query.from_user.id
    mortgage_map = {
        "mortgage_yes": "–î–∞, –∏–ø–æ—Ç–µ–∫–∞, –æ–¥–æ–±—Ä–µ–Ω–∏–µ –µ—Å—Ç—å",
        "mortgage_no": "–ù–µ—Ç, –Ω–∞–ª–∏—á–Ω—ã–µ",
        "mortgage_plan": "–ü–ª–∞–Ω–∏—Ä—É—é –æ—Ñ–æ—Ä–º–∏—Ç—å"
    }
    user_data[user_id]['mortgage'] = mortgage_map[query.data]
    
    urgency_text = "–ö–∞–∫ —Å—Ä–æ—á–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–µ—Ä–µ–µ–∑–¥?"
    
    keyboard = [
        [InlineKeyboardButton("üö® –û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ (1-2 –Ω–µ–¥–µ–ª–∏)", callback_data="urgency_1")],
        [InlineKeyboardButton("‚ö° –í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞", callback_data="urgency_2")],
        [InlineKeyboardButton("üìÖ –í —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤", callback_data="urgency_3")],
        [InlineKeyboardButton("‚è∞ –ù–µ —Å–ø–µ—à—É", callback_data="urgency_4")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=urgency_text, reply_markup=reply_markup)
    return URGENCY

async def urgency_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END
    await query.answer()
    
    user_id = query.from_user.id
    urgency_map = {
        "urgency_1": "–û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ (1-2 –Ω–µ–¥–µ–ª–∏)",
        "urgency_2": "–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞",
        "urgency_3": "–í —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤", 
        "urgency_4": "–ù–µ —Å–ø–µ—à—É"
    }
    user_data[user_id]['urgency'] = urgency_map[query.data]
    
    viewing_text = "–ö–æ–≥–¥–∞ –≤–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä–µ–∫—Ç?"
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –í —ç—Ç–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ", callback_data="viewing_weekend")],
        [InlineKeyboardButton("üåÖ –í –±—É–¥–Ω–∏ –≤–µ—á–µ—Ä–æ–º", callback_data="viewing_evening")],
        [InlineKeyboardButton("‚òÄÔ∏è –í –±—É–¥–Ω–∏ –¥–Ω–µ–º", callback_data="viewing_day")],
        [InlineKeyboardButton("üìû –°–≤—è–∂–∏—Ç–µ—Å—å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è", callback_data="viewing_call")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=viewing_text, reply_markup=reply_markup)
    return VIEWING_TIME

async def viewing_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END
    await query.answer()
    
    user_id = query.from_user.id
    viewing_map = {
        "viewing_weekend": "–í —ç—Ç–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ",
        "viewing_evening": "–í –±—É–¥–Ω–∏ –≤–µ—á–µ—Ä–æ–º",
        "viewing_day": "–í –±—É–¥–Ω–∏ –¥–Ω–µ–º",
        "viewing_call": "–°–≤—è–∂–∏—Ç–µ—Å—å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è"
    }
    user_data[user_id]['viewing_time'] = viewing_map[query.data]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ª–∏–¥–∞
    lead_card = format_lead_card(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥–∞ —Ä–∏–µ–ª—Ç–æ—Ä—É
    if ADMIN_CHAT_ID:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=lead_card,
            parse_mode='HTML'
        )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    finish_text = f"""–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! 

–Ø –ø–µ—Ä–µ–¥–∞–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ —ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—É, {REALTOR_NAME}. 

–û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞–∑–∞.

üìû –ö–æ–Ω—Ç–∞–∫—Ç: +7 (495) 123-45-67
üìß Email: info@–¥–æ–º-—ç–∫—Å–ø–µ—Ä—Ç.—Ä—Ñ

–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã"""
    
    await query.edit_message_text(text=finish_text)
    return ConversationHandler.END

def format_lead_card(user_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–∏–¥–∞ –¥–ª—è —Ä–∏–µ–ª—Ç–æ—Ä–∞"""
    data = user_data[user_id]
    
    card = f"""üî• <b>–ù–û–í–´–ô –ì–û–†–Ø–ß–ò–ô –õ–ò–î!</b>

üè† <b>–û–±—ä–µ–∫—Ç:</b> {DEMO_PROPERTY['address']}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {data['name']} (@{data['username']})
üí∞ <b>–¢–∏–ø:</b> {data['deal_type']}
üíµ <b>–ë—é–¥–∂–µ—Ç:</b> {data['budget']}
üè¶ <b>–ò–ø–æ—Ç–µ–∫–∞:</b> {data['mortgage']}
‚è∞ <b>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</b> {data['urgency']}
üìÖ <b>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫–∞–∑—É:</b> {data['viewing_time']}

üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> @{data['username']}

<i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –±–æ—Ç–æ–º {AGENT_NAME}</i>"""
    
    return card

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """ü§ñ <b>–î–µ–º–æ-–±–æ—Ç –¥–ª—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</b>

–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç –ø–µ—Ä–≤–∏—á–Ω—É—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–∏–µ–ª—Ç–æ—Ä—É.

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /start
2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞
3. –ü–æ–ª—É—á–∏—Ç–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<i>–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º</i>"""
    
    if update.message:
        await update.message.reply_text(help_text, parse_mode='HTML')

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DEAL_TYPE: [CallbackQueryHandler(deal_type_handler)],
            BUDGET: [CallbackQueryHandler(budget_handler)],
            MORTGAGE: [CallbackQueryHandler(mortgage_handler)],
            URGENCY: [CallbackQueryHandler(urgency_handler)],
            VIEWING_TIME: [CallbackQueryHandler(viewing_time_handler)],
        },
        fallbacks=[CommandHandler("help", help_command)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 